from aiogram.types import (
                        InlineKeyboardMarkup,
                        InlineKeyboardButton,
                        ReplyKeyboardMarkup,
                        KeyboardButton)
from aiogram.types.web_app_info import WebAppInfo
from aiogram.filters.callback_data import CallbackData
from src.database.queries.orm import db


app_link = 'https://ir-wb-auto.ru/?v=2'

back_button = [InlineKeyboardButton(text='<< –ú–µ–Ω—é', callback_data='back')]

to_menu = InlineKeyboardMarkup(inline_keyboard=[back_button])

class MyCallback(CallbackData, prefix="my"):
    string: str
    value: bool

def create_payment_kb(payment_url: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url)], 
            back_button
        ]
    )

async def settings_kb(chat_id) -> InlineKeyboardMarkup:
    status = await db.get_notifications_status(chat_id)
    if status:
        btn_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    else:
        btn_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        
    return InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text='üîë –¢–æ–∫–µ–Ω WB', callback_data='wb_token'), 
                                InlineKeyboardButton(text='üìù –û–±–Ω–æ–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã', web_app=WebAppInfo(url=app_link))],
                                [InlineKeyboardButton(text=btn_text, 
                                                      callback_data=MyCallback(
                                                                                string="notification",
                                                                                value=status).pack())],
                                back_button
                                ])



pinned_menu = ReplyKeyboardMarkup(
                                keyboard=[
                                    [KeyboardButton(text='üè† –ú–µ–Ω—é')]
                                    ], 
                                resize_keyboard=True,
                                is_persistent=True)

async def start_menu(chat_id):
    menu_list = [
        [InlineKeyboardButton(text='üìò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?', callback_data='guide')],
        [InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='user_settings'), 
        InlineKeyboardButton(text='üõí –ü–æ–¥–ø–∏—Å–∫–∞', callback_data='subscribe_status')],
        ]
    trial_status = await db.check_trial(chat_id)
    if trial_status:
        menu_list.append(
            [InlineKeyboardButton(text='üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='trial')]
        )
    return InlineKeyboardMarkup(inline_keyboard=menu_list)

trial_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='activate_trial')],
    back_button
])

help_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üé• –í–∏–¥–µ–æ', url='example.com'), 
    InlineKeyboardButton(text='–¢–µ–∫—Å—Ç–æ–≤—ã–π –≥–∞–π–¥', callback_data='text_guide')],
    back_button])

sub_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (1 –º–µ—Å—è—Ü)', callback_data='buy_sub')],
    back_button
])



